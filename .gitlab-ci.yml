stages:
  - secrets-scanning
  - code-linting
  - code-analysis
  - docker-linting
  - build

variables:
  ALUMNO: devops-grupo11
  TAG: devops-runner

# Job para escanear secretos en la API de Python
scan-secrets-python:
  image: python:3.9-bullseye
  stage: secrets-scanning
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: scan-secrets-python-$ALUMNO.json
  cache:
    paths:
      - .venv/
  script:
    - git diff --exit-code python-api/ || (
        python3 -m venv .venv
        source .venv/bin/activate
        pip install detect-secrets
        cd python-api
        detect-secrets scan . --all-files --exclude-files ".venv/*" > "../$ARTIFACT_FILE_NAME"
      )
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

# Job para escanear secretos en la API de Node
scan-secrets-node:
  image: python:3.9-bullseye
  stage: secrets-scanning
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: scan-secrets-node-$ALUMNO.json
  cache:
    paths:
      - node_modules/
      - .venv/
  script:
    - git diff --exit-code node-api/ || (
        apt update && apt install -y --no-install-recommends nodejs npm
        python3 -m venv .venv
        source .venv/bin/activate
        pip install detect-secrets
        cd node-api
        npm install
        git diff --exit-code || detect-secrets scan . --all-files --exclude-files ".venv/*" --exclude-files "node_modules/*" > "../$ARTIFACT_FILE_NAME"
      )
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

# Job para escanear secretos en el frontend de React
scan-secrets-react:
  image: python:3.9-bullseye
  stage: secrets-scanning
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: scan-secrets-react-$ALUMNO.json
  cache:
    paths:
      - node_modules/
      - .venv/
  script:
    - git diff --exit-code web/ || (
        apt update && apt install -y --no-install-recommends nodejs npm
        python3 -m venv .venv
        source .venv/bin/activate
        pip install detect-secrets
        cd web
        npm install
        git diff --exit-code || detect-secrets scan . --all-files --exclude-files ".venv/*" --exclude-files "node_modules/*" > "../$ARTIFACT_FILE_NAME"
      )
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME


# 1.2 linting de CÃ³digo (sin escaneo de secretos)

# code-linting para la API de Python
lint-python-api:
  image: python:3.9-bullseye
  stage: code-linting
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: lint-python-api-$ALUMNO.json
  cache:
    paths:
      - .venv/
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install flake8
    - cd python-api
    - ls -la
    - pip freeze
    - flake8 . --exclude=venv,.venv,build,dist --verbose > "../$ARTIFACT_FILE_NAME"
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

# code-linting para la API de Node
lint-node-api:
  image: node:18
  stage: code-linting
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: lint-node-api-$ALUMNO.json
  cache:
    paths:
      - node_modules/
  script:
    - cd node-api
    - npm install
    - npm list
    - ls -la
    - npx eslint . --ignore-pattern "node_modules/*" --fix > "../$ARTIFACT_FILE_NAME"
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

# code-linting para el frontend de React
lint-react:
  image: node:18
  stage: code-linting
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: lint-react-$ALUMNO.json
  cache:
    paths:
      - node_modules/
  script:
    - cd web
    - npm install
    - npx eslint . --ignore-pattern "node_modules/*" > "../$ARTIFACT_FILE_NAME"
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME


# 1.3 Build de codigo

dockerize-all:
  image: docker:20.10.7
  stage: build
  tags: [$TAG]
  services:
    - name: docker:24.0.2-dind
      alias: docker
  before_script:
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
  script:
    - docker-compose -f docker-compose.yml build
    - docker-compose -f docker-compose.yml push
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - docker-compose.yaml



# 1.4 
sast-scan-node:
  image: python:3.9-bullseye
  stage: code-analysis
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: sast-scan-node-$ALUMNO.txt
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install njsscan==0.2.2 semgrep==0.38.0
    - njsscan node-api/ > $ARTIFACT_FILE_NAME
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

sast-scan-react:
  image: python:3.9-bullseye
  stage: code-analysis
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: sast-scan-react-$ALUMNO.txt
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install njsscan==0.2.2 semgrep==0.38.0
    - njsscan web/ > $ARTIFACT_FILE_NAME
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

sca-scan-node:
  image: docker
  stage: code-analysis
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: sca-scan-node-$ALUMNO.txt
    PATH_SERVER_USR: devops
    PATH_CODE: node-api
    DOCKER_IMAGE_NAME: $CI_REGISTRY/api-$ALUMNO:1.0.0
    DOCKER_BUILDKIT: "1"
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    CA_CERTIFICATE: "$CA_CERTIFICATE"
  before_script:
    - 'which ssh-agent || ( apk update && apk add openssh-client)'
    - eval $(ssh-agent -s)
    - echo "$SERVER_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - mkdir -p /usr/local/share/ca-certificates || exit
    - echo "$CA_CERTIFICATE" > /etc/ssl/certs/my-ca.crt || exit
  script:
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "docker pull gruebel/retirejs:latest" 
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "mkdir -p /tmp/$PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO"
    - scp -r $PATH_CODE $SERVER_USR@$SERVER_INSTANCE:/tmp/$PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE \
      "docker run --rm -v /tmp/$PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO/$PATH_CODE:/app gruebel/retirejs:latest --outputformat text --outputpath /app/$ARTIFACT_FILE_NAME"
    - scp $SERVER_USR@$SERVER_INSTANCE:/tmp/$PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO/$PATH_CODE/$ARTIFACT_FILE_NAME .
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

sca-scan-react:
  image: docker
  stage: code-analysis
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: sca-scan-node-$ALUMNO.txt
    PATH_SERVER_USR: devops
    PATH_CODE: web
    DOCKER_IMAGE_NAME: $CI_REGISTRY/api-$ALUMNO:1.0.0
    DOCKER_BUILDKIT: "1"
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    CA_CERTIFICATE: "$CA_CERTIFICATE"
  before_script:
    - 'which ssh-agent || ( apk update && apk add openssh-client)'
    - eval $(ssh-agent -s)
    - echo "$SERVER_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - mkdir -p /usr/local/share/ca-certificates || exit
    - echo "$CA_CERTIFICATE" > /etc/ssl/certs/my-ca.crt || exit
  script:
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "docker pull gruebel/retirejs:latest" 
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "mkdir -p /tmp/$PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO"
    - scp -r $PATH_CODE $SERVER_USR@$SERVER_INSTANCE:/tmp/$PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE \
      "docker run --rm -v /tmp/$PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO/$PATH_CODE:/app gruebel/retirejs:latest --outputformat text --outputpath /app/$ARTIFACT_FILE_NAME"
    - scp $SERVER_USR@$SERVER_INSTANCE:/tmp/$PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO/$PATH_CODE/$ARTIFACT_FILE_NAME .
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

sast-scan-python:
  image: python:3.9-bullseye
  stage: code-analysis
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: sast-scan-python-$ALUMNO.txt
    SCAN_DIRECTORY: python-api
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install bandit
    - bandit -r $SCAN_DIRECTORY > $ARTIFACT_FILE_NAME
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

sca-scan-python:
  image: python:3.9-bullseye
  stage: code-analysis
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: sca-scan-python-$ALUMNO.txt
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install safety
    - safety check -r python-api/requirements.txt > $ARTIFACT_FILE_NAME
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

docker-lint-python:
  image: python:3.9-bullseye
  stage: docker-linting
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: python-docker-linting-$ALUMNO.txt
    SCAN_DIRECTORY: python-api
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install checkov
    - pip install semgrep==0.38.0 jsonschema==3.2.0 ruamel.yaml==0.16.10
    - checkov -f $SCAN_DIRECTORY/Dockerfile --framework dockerfile > $ARTIFACT_FILE_NAME
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

docker-lint-node:
  image: python:3.9-bullseye
  stage: docker-linting
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: node-docker-linting-$ALUMNO.txt
    SCAN_DIRECTORY: node-api
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install checkov
    - pip install semgrep==0.38.0 jsonschema==3.2.0 ruamel.yaml==0.16.10
    - checkov -f $SCAN_DIRECTORY/Dockerfile --framework dockerfile > $ARTIFACT_FILE_NAME
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

docker-lint-db:
  image: python:3.9-bullseye
  stage: docker-linting
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: db-docker-linting-$ALUMNO.txt
    SCAN_DIRECTORY: db
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install checkov
    - pip install semgrep==0.38.0 jsonschema==3.2.0 ruamel.yaml==0.16.10
    - checkov -f $SCAN_DIRECTORY/Dockerfile --framework dockerfile > $ARTIFACT_FILE_NAME
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

docker-lint-nginx:
  image: python:3.9-bullseye
  stage: docker-linting
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: nginx-docker-linting-$ALUMNO.txt
    SCAN_DIRECTORY: nginx
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install checkov
    - pip install semgrep==0.38.0 jsonschema==3.2.0 ruamel.yaml==0.16.10
    - checkov -f $SCAN_DIRECTORY/Dockerfile --framework dockerfile > $ARTIFACT_FILE_NAME
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

docker-lint-web:
  image: python:3.9-bullseye
  stage: docker-linting
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: web-docker-linting-$ALUMNO.txt
    SCAN_DIRECTORY: web
  script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install checkov
    - pip install semgrep==0.38.0 jsonschema==3.2.0 ruamel.yaml==0.16.10
    - checkov -f $SCAN_DIRECTORY/Dockerfile --framework dockerfile > $ARTIFACT_FILE_NAME
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME