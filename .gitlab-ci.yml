stages:
  - secrets-scanning
  - linting

variables:
  ALUMNO: devops-grupo11
  TAG: devops-runner

# Job para escanear secretos en la API de Python
scan-secrets-python:
  image: python:3.9-bullseye
  stage: secrets-scanning
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: scan-secrets-python-$ALUMNO.json
  cache:
    paths:
      - .venv/
  script:
    - git diff --exit-code python-api/ || (
        python3 -m venv venv
        source venv/bin/activate
        pip install detect-secrets
        cd python-api
        detect-secrets scan . --all-files --exclude-files "venv/*" > "../$ARTIFACT_FILE_NAME"
      )
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

# Job para escanear secretos en la API de Node
scan-secrets-node:
  image: python:3.9-bullseye
  stage: secrets-scanning
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: scan-secrets-node-$ALUMNO.json
  cache:
    paths:
      - node_modules/
      - .venv/
  script:
    - git diff --exit-code node-api/ || (
        apt update && apt install -y --no-install-recommends nodejs npm
        python3 -m venv venv
        source venv/bin/activate
        pip install detect-secrets
        cd node-api
        npm install
        git diff --exit-code || detect-secrets scan . --all-files --exclude-files "venv/*" --exclude-files "node_modules/*" > "../$ARTIFACT_FILE_NAME"
      )
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

# Job para escanear secretos en el frontend de React
scan-secrets-react:
  image: python:3.9-bullseye
  stage: secrets-scanning
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: scan-secrets-react-$ALUMNO.json
  cache:
    paths:
      - node_modules/
      - .venv/
  script:
    - git diff --exit-code web/ || (
        apt update && apt install -y --no-install-recommends nodejs npm
        python3 -m venv venv
        source venv/bin/activate
        pip install detect-secrets
        cd web
        npm install
        git diff --exit-code || detect-secrets scan . --all-files --exclude-files "venv/*" --exclude-files "node_modules/*" > "../$ARTIFACT_FILE_NAME"
      )
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME


# 1.2 Linting de CÃ³digo (sin escaneo de secretos)

# Linting para la API de Python
lint-python-api:
  image: python:3.9-bullseye
  stage: linting
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: lint-python-api-$ALUMNO.json
  cache:
    paths:
      - .venv/
  script:
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install flake8
    - cd python-api
    - ls -la
    - pip freeze
    - flake8 . --exclude=venv,.venv,build,dist --verbose > "../$ARTIFACT_FILE_NAME"
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

# Linting para la API de Node
lint-node-api:
  image: node:18
  stage: linting
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: lint-node-api-$ALUMNO.json
  cache:
    paths:
      - node_modules/
  script:
    - cd node-api
    - npm install
    - npm list
    - ls -la
    - npx eslint . --ignore-pattern "node_modules/*" --fix > "../$ARTIFACT_FILE_NAME"
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME

# Linting para el frontend de React
lint-react:
  image: node:18
  stage: linting
  tags:
    - $TAG
  variables:
    ARTIFACT_FILE_NAME: lint-react-$ALUMNO.json
  cache:
    paths:
      - node_modules/
  script:
    - cd web
    - npm install
    - npx eslint . --ignore-pattern "node_modules/*" > "../$ARTIFACT_FILE_NAME"
  artifacts:
    paths:
      - $ARTIFACT_FILE_NAME
