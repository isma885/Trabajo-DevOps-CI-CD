stages:
  - secrets-scanning
  - code-linting
  - code-analysis
  - docker-linting
  - build
  - scan-images
  - deploy

variables:
  ALUMNO: devops-grupo11
  TAG: devops-runner
  MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  MYSQL_DATABASE_USER: ${MYSQL_DATABASE_USER}
  MYSQL_DATABASE_PASSWORD: ${MYSQL_DATABASE_PASSWORD}
  MYSQL_DATABASE_HOST: ${MYSQL_DATABASE_HOST}
  MYSQL_DATABASE_DB: ${MYSQL_DATABASE_DB}
  MYSQL_DATABASE_PORT: ${MYSQL_DATABASE_PORT}
  DOCKER_NETWORK: ${DOCKER_NETWORK}


deploy:
  stage: deploy
  image: alpine:3.18.4
  tags: [$TAG]
  variables:
    PATH_SERVER_USR: devops
    PATH_COMPOSE: ./docker-compose.yml
  before_script:
    - 'which ssh-agent || ( apk update && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - echo "$SERVER_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - mkdir -p /usr/local/share/ca-certificates || exit
    - echo "$CA_CERTIFICATE" > /etc/ssl/certs/my-ca.crt || exit
  script:
    # Crear la red Docker si no existe
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "docker network inspect $DOCKER_NETWORK || docker network create $DOCKER_NETWORK" || echo "Error al crear o verificar la red Docker"

    # Crear directorio para el proyecto
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "mkdir -p $PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO/data" || echo "Error al crear directorio de datos"

    # Copiar el docker-compose al servidor
    - scp $PATH_COMPOSE $SERVER_USR@$SERVER_INSTANCE:$PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO || echo "Error al copiar docker-compose.yml al servidor"

    # Iniciar sesión en el registro Docker
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY" || echo "Error al hacer login en el registro Docker"

    # Crear el archivo .env con las variables de entorno
    - |
      ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "
        echo 'MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD' > $PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO/.env &&
        echo 'MYSQL_DATABASE_USER=$MYSQL_DATABASE_USER' >> $PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO/.env &&
        echo 'MYSQL_DATABASE_PASSWORD=$MYSQL_DATABASE_PASSWORD' >> $PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO/.env &&
        echo 'MYSQL_DATABASE_HOST=$MYSQL_DATABASE_HOST' >> $PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO/.env &&
        echo 'MYSQL_DATABASE_DB=$MYSQL_DATABASE_DB' >> $PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO/.env &&
        echo 'MYSQL_DATABASE_PORT=$MYSQL_DATABASE_PORT' >> $PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO/.env
      " || echo "Error al crear el archivo .env en el servidor"

    # Verificar que el archivo .env tiene las variables correctas
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "cat $PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO/.env" || echo "Error al leer el archivo .env"

    # Detener cualquier contenedor existente
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "cd $PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO && docker compose down --rmi all" || echo "Error al detener los contenedores existentes"
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "cd $PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO && docker ps" || echo "Error al listar los contenedores"

    # Levantar los contenedores en segundo plano
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "cd $PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO && docker compose --env-file .env up -d" || echo "Error al levantar los contenedores con docker-compose"
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "cd $PATH_SERVER_USR/$CI_PROJECT_NAME/$ALUMNO && docker ps" || echo "Error al listar los contenedores después de levantarlos"

    # Verificar que las API estén funcionando
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "curl --max-time 30 http://$SERVER_INSTANCE:8011/apipython/health || echo 'API Python not reachable'" || echo "Error al verificar la API Python"
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "curl --max-time 30 http://$SERVER_INSTANCE:8011/apinode/test || echo 'API Node not reachable'" || echo "Error al verificar la API Node"
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "curl --max-time 30 http://$SERVER_INSTANCE:8011/react/ || echo 'React app not reachable'" || echo "Error al verificar la aplicación React"

    # Mostrar logs de los contenedores relevantes para depuración
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "docker logs devops-grupo11-apipython || echo 'No logs for API Python'"
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "docker logs devops-grupo11-apinode || echo 'No logs for API Node'"
    - ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "docker logs devops-grupo11-reactapp || echo 'No logs for React App'"

    # Esperar a que la base de datos esté lista
    - |
      ssh -o "StrictHostKeyChecking=no" $SERVER_USR@$SERVER_INSTANCE "
        until docker exec devops-grupo11-db-crud-users-1 mysqladmin ping -u root -p$MYSQL_ROOT_PASSWORD --silent; do
          echo 'Waiting for database to be ready...'
          sleep 5
        done
        echo 'Database is up and running'
      " || echo "Error al verificar que la base de datos esté disponible"
